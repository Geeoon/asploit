from abc import ABC, abstractmethod  # abstract methods and inheritance
from Exceptions import *
from CommandProcessor import CommandProcessor

"""
@brief The ExploitProcessor class is an abstract class that accepts commands
        passed into it and processes it to be sent to the backdoored server.
        Inherits from the CommandProcessor class. 
"""
class ExploitProcessor(CommandProcessor, ABC):
    """
    @brief Construct an ExploitProcessor.
    @param host the hostname of the backdoored server.
    @param path the path of the backdoored resource.
    @param method the HTTP method to access the backdoor with.
    @param header the HTTP header containing the backdoor.
    @pre \p host is a valid backdoored host.
    @pre \p path is the path to a valid backdoored resource.
    @pre \p method is allowed by the target.
    @pre \p header corresponds to the server side backdoor.
    @throw CommandException if the connection fails.
    """
    def __init__(self, host: str, path: str, method: str, header: str):
        super().__init__()
        self.commands["--version"] = {
            "method": self._Base__version,
            "description": "Get the version of PHP running."
        }
        self.directory = ""
        self.host = host
        self.path = path
        self.method = method
        self.header = header
        self._Base__make_connection()
        print("Exploit successful.")
        print("You can now run exploit commands.")
        print("For help, run 'help'")

    """
    @brief Abstract method to start a connection with the backdoored resource.
    @throw CommandException if the connection fails.
    """
    @abstractmethod
    def _Base__make_connection(self):
        pass
    
    """
    @brief Abstract method to start a connection with the backdoored resource.
    @param message the message to be sent to the backdoor.
    @pre \p message is proper and can be evaluated and will make the server
            respond with an HTTP header as defined by your exploit header.
    @throw CommandException if the server doesn't respond with success.
    """
    @abstractmethod
    def _Base__send_message(self, message: str):
        pass

    """
    @brief Abstract method to get the version of the backend software in the
            backdoored server.
    @throw CommandException if the server doesn't respond with success.
    """
    @abstractmethod
    def _Base__version(self, options):
        pass
